<?php

namespace AppBundle\Entity;

use Doctrine\ORM\EntityRepository;
use Symfony\Component\Security\Core\User\UserInterface;
use Symfony\Component\Security\Core\User\UserProviderInterface;

/**
 * TaskRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class TaskRepository extends EntityRepository {
    public function getCountTaskCreated($user_id = null) {
        $where = '';
        if($user_id != null)
           $where = "WHERE u.id =:id";

        $em = $this->getEntityManager();
        $query = $em->createQuery('
            SELECT COUNT (t)
            FROM AppBundle:Task t JOIN t.user_created_task u ' . $where . '
        ');
        if($user_id != null)
            $query->setParameter('id', $user_id);

        return $query->getSingleScalarResult();
    }

    public function getTaskCreated($start = 0, $length = 10, $search, $user_id = null, $where = '') {
        $searchDQL = "";
        if ($search) {
            $searchDQL .= "WHERE t.name LIKE '%$search%'
                OR u.name LIKE '%$search%'
                OR ua.name LIKE '%$search%'
                OR ua.name LIKE '%$search%'
                OR s.name LIKE '%$search%'
                OR t.start_time LIKE '%$search%'
                OR t.end_time LIKE '%$search%'
                OR p.name LIKE '%$search%'
            ";
        }
        if($user_id != null)
        {
            if($searchDQL == "") $searchDQL .= 'where '; else $searchDQL .= ' and';
            $searchDQL .=  "u.id =:id";
        }

        if($where != ''){
            $searchDQL .= ($searchDQL != '')?' AND ':' WHERE ';
            $searchDQL.= $where;
        }

        $em = $this->getEntityManager();
        $query = $em->createQuery('
            SELECT t.id, t.name, u.name as user_created, ua.name as user_assigned, t.start_time, t.end_time, s.name as state, t.priority, p.name as proyect,
            t.description, s.id as state_id, p.enabled
            FROM AppBundle:Task t JOIN t.user_created_task u LEFT JOIN t.user ua JOIN t.state s JOIN t.proyect p
            ' . $searchDQL . '
            GROUP BY t.id
            ORDER BY s.id, t.id DESC
        ');
        $query->setFirstResult($start);
        if($user_id != null)
            $query->setParameter('id', $user_id);
        if ($length != 'all')
            $query->setMaxResults($length);

        return $query->getArrayResult();
    }

    public function getProyectWithUserAssignedInTask($userId = null){
        $where='';
        if($userId != null)
            $where = ' u.id = :id ';

        $em = $this->getEntityManager();
        $query = $em->createQuery('
            SELECT t,p
            FROM AppBundle:Task t JOIN t.proyect p JOIN t.user u
            WHERE '.$where.'
            GROUP BY p.id
        ');
        if($userId != null)
            $query->setParameter('id', $userId);
        return $query->getResult(\Doctrine\ORM\Query::HYDRATE_ARRAY);
    }

    public function getCountTaskAssigned($user_id = null) {
        $where = '';
        if($user_id != null)
            $where = "WHERE u.id =:id";

        $em = $this->getEntityManager();
        $query = $em->createQuery('
            SELECT COUNT (t)
            FROM AppBundle:Task t JOIN t.user u ' . $where . '
        ');
        if($user_id != null)
            $query->setParameter('id', $user_id);

        return $query->getSingleScalarResult();
    }

    public function getTaskAssigned($start = 0, $length = 10, $search, $user_id = null, $where = '') {
        $searchDQL = "";
        if ($search) {
            $searchDQL .= "WHERE t.name LIKE '%$search%'
                OR u.name LIKE '%$search%'
                OR ua.name LIKE '%$search%'
                OR ua.name LIKE '%$search%'
                OR s.name_my_task LIKE '%$search%'
                OR t.start_time LIKE '%$search%'
                OR t.end_time LIKE '%$search%'
                OR p.name LIKE '%$search%'
            ";
        }
        if($user_id != null)
        {
            if($searchDQL == "") $searchDQL .= 'where '; else $searchDQL .= ' and';
            $searchDQL .=  "ua.id =:id";
        }

        if($where != ''){
            $searchDQL .= ($searchDQL != '')?' AND ':' WHERE ';
            $searchDQL.= $where;
        }

        $em = $this->getEntityManager();
        $query = $em->createQuery('
            SELECT t.id, t.name, u.name as user_created, ua.name as user_assigned, t.start_time, t.end_time, s.name_my_task as state,
            t.priority, p.name as proyect, t.description, p.enabled, s.id as state_id
            FROM AppBundle:Task t JOIN t.user_created_task u LEFT JOIN t.user ua JOIN t.state s JOIN t.proyect p
            ' . $searchDQL . '
            GROUP BY t.id
            ORDER BY s.id, t.start_time DESC
        ');
        $query->setFirstResult($start);
        if($user_id != null)
            $query->setParameter('id', $user_id);
        if ($length != 'all')
            $query->setMaxResults($length);

        return $query->getArrayResult();
    }

    public function getResumeCountMyTaskByStatus($proyect = null, $user = null, $proyectStatus = null){
        $where = '';
        if($proyect != null)
            $where = ' AND p.id= :proyect ';

        if($user != null)
            $where.= ' AND u.id = :user';

        if($proyectStatus != null)
            $where.= ' AND p.enabled = :enabled';

        $em = $this->getEntityManager();
        $query = $em->createQuery('
            SELECT (SELECT COUNT(t) FROM AppBundle:Task t JOIN t.proyect p JOIN t.user u JOIN t.state st WHERE st.id = s.id' . $where . ') as amount, s.name, s.color, s.name_my_task
            FROM AppBundle:State s WHERE s.id != 1
        ');
        if($proyect != null)
            $query->setParameter('proyect', $proyect);
        if($user != null)
            $query->setParameter('user', $user);
        if($proyectStatus != null)
            $query->setParameter('enabled', $proyectStatus);

        return $query->getResult(\Doctrine\ORM\Query::HYDRATE_OBJECT);
    }

    public function getResumeCountTaskByStatus($proyect = null, $user = null, $proyectStatus = null){
        $where = '';
        if($proyect != null)
            $where = ' AND p.id= :proyect ';

        if($user != null)
            $where.= ' AND u.id = :user';

        if($proyectStatus != null)
            $where.= ' AND p.enabled = :enabled';


        $em = $this->getEntityManager();
        $query = $em->createQuery('
            SELECT (SELECT COUNT(t) FROM AppBundle:Task t JOIN t.proyect p JOIN t.user_created_task u JOIN t.state st WHERE st.id = s.id' . $where . ') as amount, s.name, s.color
            FROM AppBundle:State s
        ');
        if($proyect != null)
            $query->setParameter('proyect', $proyect);
        if($user != null)
            $query->setParameter('user', $user);
        if($proyectStatus != null)
            $query->setParameter('enabled', $proyectStatus);

        return $query->getResult(\Doctrine\ORM\Query::HYDRATE_OBJECT);
    }

    public function getCountTaskByProyectAndStatusAndUserCreatedtask($proyect = null, $status = null, $user = null, $proyectStatus = null){
        $where = '';
        if($proyect != null){
            $where = ' WHERE p.id= :proyect ';
        }

        if($status != null){
            $where.= ($where == '')?' WHERE ':' AND ';
            $where.= 's.id = :state';
        }

        if($user != null){
            $where.= ($where == '')?' WHERE ':' AND ';
            $where.= 'u.id = :user';
        }

        if($proyectStatus != null){
            $where.= ($where == '')?' WHERE ':' AND ';
            $where.= ' p.enabled = :enabled';
        }

        $em = $this->getEntityManager();
        $query = $em->createQuery('
            SELECT COUNT (t)
            FROM AppBundle:Task t JOIN t.proyect p JOIN t.state s JOIN t.user_created_task u
            ' . $where . '
        ');

        if($proyect != null)
            $query->setParameter('proyect', $proyect);
        if($status != null)
            $query->setParameter('state', $status);
        if($user != null)
            $query->setParameter('user', $user);
        if($proyectStatus != null)
            $query->setParameter('enabled', $proyectStatus);
        return $query->getSingleScalarResult();
    }

    public function getTaskWithUserCreatedTask($proyect = null, $status = null, $user = null, $proyectStatus = null){
        $where = '';
        if($proyect != null){
            $where = ' WHERE p.id= :proyect ';
        }

        if($status != null){
            $where.= ($where == '')?' WHERE ':' AND ';
            $where.= 's.id in (:status)';
        }

        if($user != null){
            $where.= ($where == '')?' WHERE ':' AND ';
            $where.= 'u.id = :user';
        }

        if($proyectStatus != null)
            $where.= ' AND p.enabled = :enabled';

        $em = $this->getEntityManager();
        $query = $em->createQuery('
            SELECT t.name as task, t.description, t.priority, p.name as proyect, s.color, s.name as state, t.id as task_id, t.start_time as createdOn, ua.name as userAssigned,
            p.id as project_id
            FROM AppBundle:Task t JOIN t.proyect p JOIN t.state s JOIN t.user_created_task u LEFT JOIN t.user ua
            ' . $where . '
        ');

        if($proyect != null)
            $query->setParameter('proyect', $proyect);
        if($status != null)
            $query->setParameter('status', $status);
        if($user != null)
            $query->setParameter('user', $user);
        if($proyectStatus != null)
            $query->setParameter('enabled', $proyectStatus);

        return $query->getArrayResult();
    }

    public function getTaskWithUserAssignedTask($proyect = null, $status = null, $user = null, $proyectStatus = null){
        $where = '';
        if($proyect != null){
            $where = ' WHERE p.id= :proyect ';
        }

        if($status != null){
            $where.= ($where == '')?' WHERE ':' AND ';
            $where.= 's.id in (:status)';
        }

        if($user != null){
            $where.= ($where == '')?' WHERE ':' AND ';
            $where.= 'ua.id = :user';
        }

        if($proyectStatus != null)
            $where.= ' AND p.enabled = :enabled';

        $em = $this->getEntityManager();
        $query = $em->createQuery('
            SELECT t.name as task, t.description, t.priority, p.name as proyect, s.color, s.name as state,
             t.id as task_id, t.start_time as createdOn, ua.name as userAssigned, p.id as project_id,u.name as userCreatedTask
            FROM AppBundle:Task t JOIN t.proyect p JOIN t.state s JOIN t.user_created_task u JOIN t.user ua
            ' . $where . '
        ');

        if($proyect != null)
            $query->setParameter('proyect', $proyect);
        if($status != null)
            $query->setParameter('status', $status);
        if($user != null)
            $query->setParameter('user', $user);
        if($proyectStatus != null)
            $query->setParameter('enabled', $proyectStatus);

        return $query->getArrayResult();
    }

}
